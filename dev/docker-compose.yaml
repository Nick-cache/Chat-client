services:
  frontend:
    container_name: ${FRONTEND_NAME}
    build:
      context: ../
      dockerfile: ./frontend/Dockerfile
    volumes:
      - ../frontend:/app
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - FRONTEND_HOST
      - FRONTEND_DEV
      - LMS_DOMAIN_LINK
      - LMS_SOCKET_PATH
      - BACKEND_DOMAIN_LINK
    networks:
      - lms
      - backend

  backend:
    container_name: ${BACKEND_NAME}
    build:
      context: ../
      dockerfile: ./backend/Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ../backend:/app
    environment:
      - BACKEND_HOST
      - BACKEND_PORT
      - BACKEND_RELOAD
      - BACKEND_WORKERS
      - BACKEND_CORS
      - POSTGRES_SERVICE
      - TIMEZONE
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
    depends_on:
      - postgres
    networks:
      - backend
      - postgres

  backend-test:
    extends: backend
    container_name: "${BACKEND_NAME}-test"
    build:
      dockerfile: ./backend/test/Dockerfile
    volumes:
      - ../backend:/app
    ports: !reset []
    command: bash -c "find /app test | entr -n pytest test"
    networks:
      - backend

  lms:
    container_name: ${LMS_NAME}
    build:
      context: ../
      dockerfile: ./lms/Dockerfile
    volumes:
      - ../lms/src:/app/src
    ports:
      - "${LMS_PORT}:${LMS_PORT}"
    command: npx nodemon /app/src/index.js
    environment:
      - LMS_LOCAL_HOST
      - LMS_LOCAL_PORT
      - LMS_SOCKET
      - LMS_CORS
      - BACKEND_SERVICE
    extra_hosts:
      - "${LMS_LOCAL_HOST}:host-gateway"
    networks:
      - lms
      - backend

networks:
  backend:
    driver: bridge
  postgres:
    driver: bridge
  lms:
    driver: bridge