services:
  postgres:
    container_name: ${POSTGRES_SERVICE}
    build:
      context: ../
      dockerfile: ./dev/postgresql/Dockerfile
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_PORT

  backend:
    container_name: ${BACKEND_SERVICE}
    build:
      context: ../
      dockerfile: ./backend/Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ../backend:/app
    environment:
      - BACKEND_HOST
      - BACKEND_PORT
      - BACKEND_RELOAD
      - BACKEND_WORKERS
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_BROKER
      - REDIS_CACHE
      - POSTGRES_URI
      - TIMEZONE
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
    depends_on:
      - postgres

  backend-test:
    extends: backend
    container_name: "${BACKEND_SERVICE}-test"
    build:
      dockerfile: ./backend/test/Dockerfile
    volumes:
      - ../backend:/app
    ports: !reset []
    command: bash -c "find /app test | entr -n pytest test"
    # command: pytest test

  lms:
    container_name: ${LMS_SERVICE}
    build:
      context: ../
      dockerfile: ./lms/Dockerfile
    volumes:
      - ../lms/src:/app/src
    ports:
      - "${LMS_PORT}:${LMS_PORT}"
    command: npx nodemon /app/src/index.js
    network_mode: host

  # frontend:
  #   container_name: vite
  #   build: 
  #     context: ../
  #     dockerfile: ./frontend/Dockerfile
  #   volumes:
  #     - ../frontend:/app
  #   ports:
  #     - "${FRONTEND_PORT}:${FRONTEND_PORT}"

  # redis:
  #   container_name: ${REDIS_SERVICE}
  #   build: ./redis
  #   ports: 
  #     - "${REDIS_PORT}:${REDIS_PORT}"
  #   healthcheck:
  #     test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
  #     interval: 1s
  #     timeout: 3s
  #     retries: 5
